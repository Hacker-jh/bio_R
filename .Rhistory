install.packages("remotes")
remotes::install_github("icbi-lab/immunedeconv")
remotes::install_github("icbi-lab/immunedeconv")
chooseCRANmirror()
remotes::install_github("icbi-lab/immunedeconv")
remotes::install_github("icbi-lab/immunedeconv")
remotes::install_github("icbi-lab/immunedeconv")
remotes::install_github("icbi-lab/immunedeconv")
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
update.packages(ask='graphics',checkBuilt=TRUE)
remotes
utils
update.packages(ask='graphics',checkBuilt=TRUE)
setRepositories()
q()
q()
remotes::install_github("icbi-lab/immunedeconv")
Downloading GitHub repo icbi-lab/immunedeconv@HEAD
update.packages(ask='graphics',checkBuilt=TRUE)
update.packages(ask='graphics',checkBuilt=TRUE)
update.remotes
update.utils
R.version
getOption("download.file.method")
devtools::install_github('dviraran/SingleR')"icbi-lab/immunedeconv"
devtools::install_github('dviraran/SingleR')"icbi-lab/immunedeconv"
devtools::install_github('icbi-lab/immunedeconv')
install.packages("devtools")
devtools::install_github('icbi-lab')
/
evtools::install_github('icbi-lab')
devtools::install_github('icbi-lab')
devtools::install_github('icbi-lab')
devtools::install_github("icbi-lab")
/
q()
icbi-lab
/
remotes::install_github("icbi-lab/immunedeconv")
update.packages(ask='graphics',checkBuilt=TRUE)
remotes::install_github("icbi-lab/immunedeconv")
devtools::install_github('icbi-lab/immunedeconv')
install.packages("Rtools")
utils:::menuInstallLocal()
install.packages("C:\Users\Hacker_JH\Desktop\immunedeconv-master.zip")
utils:::menuInstallLocal()
q()
package.remote
install.packages("remotes")
remotes::install_github("icbi-lab/immunedeconv")
package.("Rtools")
packages.("Rtools")
install.packages("Rtools")
R.version
q()
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
q()
Sys.which("make")
remotes::install_github("icbi-lab/immunedeconv")
install.packages("jsonlite", type = "source")
update.packages()
remotes::install_github("icbi-lab/immunedeconv")
remotes::install_github("r-lib/conflicted")
remotes::install_github("icbi-lab/immunedeconv")
remotes::install_github("icbi-lab/immunedeconv@master")
devtools::install_github("icbi-lab/immunedeconv")
q()
remotes::install_github("icbi-lab/immunedeconv")
remotes::install_github("r-lib/testthat")
uapate.packages()
update.packages()
options(download.file.method = "wininet")
remotes::install_github("r-lib/testthat")
options(download.file.method = "libcurl")
remotes::install_github("r-lib/testthat")
remotes::install_github("icbi-lab/immunedeconv")
devtools::install_github("icbi-lab/immunedeconv")
install.packages("XML")
remotes::install_github("icbi-lab/immunedeconv")
options(download.file.method = "libcurl")
remotes::install_github("icbi-lab/immunedeconv")
r.version
R.version
conda
conda create -n deconvolution
immunedeconv::deconvolute(gene_expression_matrix, "quantiseq")
immunedeconv::deconvolute(dataset_racle, "quantiseq")
library(immunedeconv)
help(package="immunedeconv")
help(package="immunedeconv")
dataset_racle
deconvolute(dataset_racle, "xcell")
deconvolute(expr_mat, "xcell")
dataset_racle
deconvolute(expr_mat, "xcell")
dataset_racle$expr_mat
deconvolute(dataset_racle$expr_mat, "xcell")
library(dplyr)
library(ggplot2)
library(tidyr)
library(immunedeconv)
library(tibble)
knitr::kable(dataset_racle$expr_mat[1:5, ])
result=deconvolute(dataset_racle$expr_mat,"quantiseq")
library(immunedeconv)
result=deconvolute(dataset_racle$expr_mat,"quantiseq")
knitr::kable(result,digits=2)
knitr::kable(dataset_racle$expr_mat[1:5, ])
res = deconvolute(immunedeconv::dataset_racle$expr_mat, "quantiseq") %>%
map_result_to_celltypes(c("T cell CD4+"), "quantiseq")
res = deconvolute(immunedeconv::dataset_racle$expr_mat, "quantiseq") %>%map_result_to_celltypes(c("T cell CD4+"), "quantiseq")
res = deconvolute(immunedeconv::dataset_racle$expr_mat, "quantiseq") %>%
deconvolute(immunedeconv::dataset_racle$expr_mat, "timer",indications=c("SKCM", "SKCM", "BLCA"))
deconvolute(immunedeconv::dataset_racle$expr_mat, "timer",indications=c("SKCM", "SKCM", "BLCA"))
res = deconvolute(immunedeconv::dataset_racle$expr_mat, "quantiseq") %>%
map_result_to_celltypes(c("T cell CD4+"), "quantiseq")
knitr::kable(res, digits=2)
install.packages("magrittr")
install.packages("magrittr")
res = deconvolute(immunedeconv::dataset_racle$expr_mat, "quantiseq") %>%
+     map_result_to_celltypes(c("T cell CD4+"), "quantiseq")
res = deconvolute(immunedeconv::dataset_racle$expr_mat, "quantiseq")%>%map_result_to_celltypes(c("T cell CD4+"), "quantiseq")
library(magrittr)
res = deconvolute(immunedeconv::dataset_racle$expr_mat, "quantiseq") %>%
+ +     map_result_to_celltypes(c("T cell CD4+"), "quantiseq")
library(deconvolute)
library(immunedeconv)
res = deconvolute(immunedeconv::dataset_racle$expr_mat, "quantiseq") %>%
+ + +     map_result_to_celltypes(c("T cell CD4+"), "quantiseq")
conda dplyr
library(dplyr)
res = deconvolute(immunedeconv::dataset_racle$expr_mat, "quantiseq") %>%
map_result_to_celltypes(c("T cell CD4+"), "quantiseq")
starwars %>%
filter(species == "Droid")
deconvolute(your_mixture_matrix, "timer",
indications=c("SKCM", "SKCM", "BLCA"))
immunedeconv::dataset_racle$expr_mat
deconvolute(immunedeconv::dataset_racle$expr_mat, "timer",
+             indications=c("SKCM", "SKCM", "BLCA"))
library(dplyr)
library(ggplot2)
library(tidyr)
library(immunedeconv)
library(tibble)
conda create -n deconvolution
devtools(ggplots)
devtools::install(ggplot2)
install.packages("ggplot2")
install.packages("tidyr")
library(ggplot2)
library(tidyr)
knitr::kable(dataset_racle$expr_mat[1:5, ])
res_quantiseq = deconvolute(dataset_racle$expr_mat, "quantiseq", tumor = TRUE)
res_quantiseq %>%
gather(sample, fraction, -cell_type) %>%
# plot as stacked bar chart
ggplot(aes(x=sample, y=fraction, fill=cell_type)) +
geom_bar(stat='identity') +
coord_flip() +
scale_fill_brewer(palette="Paired") +
scale_x_discrete(limits = rev(levels(res_quantiseq)))
res_quantiseq %>%
+     gather(sample, fraction, -cell_type) %>%
+     # plot as stacked bar chart
+     ggplot(aes(x=样本, y=fraction, fill=细胞种类)) +
+     geom_bar(stat='identity') +
+     coord_flip() +
+     scale_fill_brewer(palette="Paired") +
+     scale_x_discrete(limits = rev(levels(res_quantiseq)))
res_quantiseq %>%
+     +     gather(样本, fraction, -细胞种类) %>%
+     +     # plot as stacked bar chart
+     +     ggplot(aes(x=样本, y=fraction, fill=细胞种类)) +
+     +     geom_bar(stat='identity') +
+     +     coord_flip() +
+     +     scale_fill_brewer(palette="Paired") +
+     +     scale_x_discrete(limits = rev(levels(res_quantiseq)))
res_quantiseq %>%
+     +     +     gather(a, fraction, -f) %>%
+     +     +     # plot as stacked bar chart
+     +     +     ggplot(aes(x=a, y=fraction, fill=f)) +
+     +     +     geom_bar(stat='identity') +
+     +     +     coord_flip() +
+     +     +     scale_fill_brewer(palette="Paired") +
+     +     +     scale_x_discrete(limits = rev(levels(res_quantiseq)))
res_mcp_counter  ％>％
聚集（样品，得分， -单元类型）％>％
ggplot（AES（X =样品，ÿ =得分，颜色=单元类型））+
geom_point（大小= 4）+
facet_wrap（〜单元类型，鳞= “free_x “，NcoI位= 3）+
scale_color_brewer（调色板=“ Paired”，guide = FALSE）+
coord_flip（）+
theme_bw（）+
主题（axis.text.x  =  element_text（angle  =  90，vjust  =  0.5，hjust = 1））
res_mcp_counter %>%
gather(sample, score, -cell_type) %>%
ggplot(aes(x=sample, y=score, color=cell_type)) +
geom_point(size=4) +
facet_wrap(~cell_type, scales="free_x", ncol=3) +
scale_color_brewer(palette="Paired", guide=FALSE) +
coord_flip() +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
res_mcp_counter = deconvolute(dataset_racle$expr_mat, "mcp_counter")
res_mcp_counter = deconvolute(dataset_racle$expr_mat, "xCell")
savehistory("C:/Users/Hacker_JH/Desktop/history.Rhistory")
kkk=deconvolute(dataset_racle$expr_mat, "xcell")
library(annotate)
detach("package:annotate", unload = TRUE)
library(dplyr)
library(ggplot2)
library(tidyr)
library(immunedeconv)
library(tibble)
kkk = deconvolute(dataset_racle$expr_mat, "xcell")
res_mcp_counter %>%
gather(sample, score, -cell_type) %>%
ggplot(aes(x=sample, y=score, color=cell_type)) +
geom_point(size=4) +
facet_wrap(~cell_type, scales="free_x", ncol=3) +
scale_color_brewer(palette="Paired", guide=FALSE) +
coord_flip() +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
kkk %>%
+     gather(sample, score, -cell_type) %>%
+     ggplot(aes(x=sample, y=score, color=cell_type)) +
+     geom_point(size=4) +
+     facet_wrap(~cell_type, scales="free_x", ncol=3) +
+     scale_color_brewer(palette="Paired", guide=FALSE) +
+     coord_flip() +
+     theme_bw() +
+     theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
res_mcp_counter = deconvolute(dataset_racle$expr_mat, "mcp_counter")
# construct a single dataframe containing all data
#
# re-map the cell-types to common names.
# only include the cell-types that are measured using FACS
cell_types = c("B cell", "T cell CD4+", "T cell CD8+", "NK cell")
tmp_quantiseq = res_quantiseq %>% map_result_to_celltypes(cell_types, "quantiseq") %>%
rownames_to_column("cell_type") %>%
gather("sample", "estimate", -cell_type) %>%
mutate(method="quanTIseq")
tmp_mcp_counter = res_mcp_counter %>% map_result_to_celltypes(cell_types, "mcp_counter") %>%
rownames_to_column("cell_type") %>%
gather("sample", "estimate", -cell_type) %>%
mutate(method="MCP-counter")
result = bind_rows(tmp_quantiseq, tmp_mcp_counter) %>%
inner_join(dataset_racle$ref)
res_mcp_counter = deconvolute(dataset_racle$expr_mat, "mcp_counter")
library(MCPcounter)
res_mcp_counter = deconvolute(dataset_racle$expr_mat, "mcp_counter")
library(RCurl)
res_mcp_counter = deconvolute(dataset_racle$expr_mat, "mcp_counter")
res_mcp_counter = deconvolute(dataset_racle$expr_mat, "mcp_counter")
kkk = deconvolute(dataset_racle$expr_mat, "xcell")
res_mcp_counter = deconvolute(dataset_racle$expr_mat, "mcp_counter")
res_mcp_counter = deconvolute(dataset_racle$expr_mat, "EPIC")
rlang::last_error()
View(kkk)
View(kkk)
View(tmp_quantiseq)
View(tmp_quantiseq)
View(tmp_quantiseq)
View(tmp_quantiseq)
View(kkk)
View(kkk)
View(kkk)
View(kkk)
View(kkk)
res_quantiseq = deconvolute(dataset_racle$expr_mat, "xcell", tumor = TRUE)
res_quantiseq = deconvolute(dataset_racle$expr_mat, "epic", tumor = TRUE)
res_quantiseq %>%
gather(sample, fraction, -cell_type) %>%
# plot as stacked bar chart
ggplot(aes(x=sample, y=fraction, fill=cell_type)) +
geom_bar(stat='identity') +
coord_flip() +
scale_fill_brewer(palette="Paired") +
scale_x_discrete(limits = rev(levels(res_quantiseq)))
sks = deconvolute(dataset_racle$expr_mat, "quantiseq", tumor = TRUE)
sks %>%
+     gather(sample, fraction, -cell_type) %>%
+     # plot as stacked bar chart
+     ggplot(aes(x=sample, y=fraction, fill=cell_type)) +
+     geom_bar(stat='identity') +
+     coord_flip() +
+     scale_fill_brewer(palette="Paired") +
+     scale_x_discrete(limits = rev(levels(sks)))
View(sks)
View(sks)
View(res_quantiseq)
View(res_quantiseq)
sks = deconvolute(dataset_racle$expr_mat, "quantiseq", tumor = TRUE)
library(dplyr)
library(ggplot2)
library(tidyr)
library(immunedeconv)
library(tibble)
library(EPIC)
MY_QUANT = deconvolute(dataset_racle$expr_mat, "quantiseq", tumor = TRUE)
View(MY_QUANT)
View(MY_QUANT)
MY_EPIC = deconvolute(dataset_racle$expr_mat, "EPIC", tumor = TRUE)
MY_EPIC = deconvolute(dataset_racle$expr_mat, "epic", tumor = TRUE)
View(MY_QUANT)
View(MY_QUANT)
View(MY_EPIC)
View(MY_EPIC)
> MY_EPIC %>%
+ +   gather(sample, fraction, -cell_type) %>%
+ +   # plot as stacked bar chart
+ +   ggplot(aes(x=sample, y=fraction, fill=cell_type)) +
+ +     geom_bar(stat='identity') +
+ +     coord_flip() +
+ +     scale_fill_brewer(palette="Paired") +
+ +     scale_x_discrete(limits = rev(levels(MY_EPIC)))
MY_EPIC %>%
+ +   gather(sample, fraction, -cell_type) %>%
+ +   # plot as stacked bar chart
+ +   ggplot(aes(x=sample, y=fraction, fill=cell_type)) +
+ +     geom_bar(stat='identity') +
+ +     coord_flip() +
+ +     scale_fill_brewer(palette="Paired") +
+ +     scale_x_discrete(limits = rev(levels(MY_EPIC)))
MY_EPIC %>%
+   gather(sample, fraction, -cell_type) %>%
+   # plot as stacked bar chart
+   ggplot(aes(x=sample, y=fraction, fill=cell_type)) +
+     geom_bar(stat='identity') +
+     coord_flip() +
+     scale_fill_brewer(palette="Paired") +
+     scale_x_discrete(limits = rev(levels(MY_EPIC)))
MY_mcp_counter = deconvolute(dataset_racle$expr_mat, "mcp_counter")
MY_mcp_counter = deconvolute(dataset_racle$expr_mat, "mcp_counter")
library(dplyr)
library(ggplot2)
library(tidyr)
library(immunedeconv)
library(tibble)
library(EPIC)
MY_mcp_counter = deconvolute(dataset_racle$expr_mat, "mcp_counter")
MY_mcp_counter = deconvolute(dataset_racle$expr_mat, "mcp_counter")
View(MY_mcp_counter)
View(MY_mcp_counter)
MY_mcp_counter %>%
gather(sample, score, -cell_type) %>%
ggplot(aes(x=sample, y=score, color=cell_type)) +
geom_point(size=4) +
facet_wrap(~cell_type, scales="free_x", ncol=3) +
scale_color_brewer(palette="Paired", guide=FALSE) +
coord_flip() +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
MY_mcp_counter %>%
+     gather(sample, score, -cell_type) %>%
+     ggplot(aes(x=sample, y=score, color=cell_type)) +
+     geom_point(size=4) +
+     facet_wrap(~cell_type, scales="free_x", ncol=3) +
+     scale_color_brewer(palette="Paired", guide=FALSE) +
+     coord_flip() +
+     theme_bw() +
+     theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
